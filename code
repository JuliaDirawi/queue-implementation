  #include<iostream>
  template <typename T>
  
  
  class Node {
  public:
      T data;
      Node<T>* next;
  
      Node(const T& newData, Node<T>* nextNode = nullptr) : data(newData), next(nextNode) {}
  };
  template <typename T>
  class my_queue {
  private:
      int size=0;
      Node<T>*front=nullptr;
      Node<T>*rear=nullptr;
  public:
  my_queue() = default;
   ~my_queue() { clear(); }
  void enqueue(T data)
  {
  Node<T>* node=new Node<T>(data);
  if(!rear)
  {
      front=node;
      rear=node;
  }
  else{
  rear->next=node;
  rear=node;}
  size++;
  
  }
  void dequeue()
  {
      if(!front)
      {
          return;
      }
       Node<T>*temp=front;
      front = front->next;
          if (!front) rear = nullptr;
          delete temp;
          size--;
      
  }
  T Front()
  {
      if(!front)
      {
         std::cout<<("Queue is empty!");
         return T();
      }
      return front->data;
  }
  bool IsEmpty()
  {
     return (!front);
  }
  int Size()
  {
      return size;
  }
  void clear()
  {
     while(!IsEmpty())
     {
    dequeue();
     }
  }
  
  };
